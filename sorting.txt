Sorting in C++

sorting in arrays:

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
	
	int arr[]={10,20,5,7};
	int n = sizeof(arr) / sizeof(arr[0]);
	
	sort(arr,arr+n); // takes two arguments which are the index of the first element and the index after the last element.  // 5.7.10,20
	
	for(int x: arr)
	    cout<<x<<" ";
	
	sort(arr,arr+n,greater<int>());    // greater<int> reverses the order of the array that was sorted in increasing order. o/p: 20,10,7,5
	
	cout<<endl;
	for(int x: arr)
	    cout<<x<<" ";
}

SORTING IN VECTORS:

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
	
    vector<int> v={10,20,5,7};
	
	sort(v.begin(),v.end());
	
	for(int x: v)
	    cout<<x<<" ";
	
	sort(v.begin(),v.end(),greater<int>());
	
	cout<<endl;
	for(int x: v)
	    cout<<x<<" ";
}

SORTING OF OWN ORDER USING STRUCT:

Here we- sort the pairs with increasing order of their x values.


#include <iostream>
#include <algorithm>
using namespace std;

struct Point{
    int x,y;
};

bool MyComp(Point p1,Point p2){
    return p1.x<p2.x;
}

int main() {
	
    Point arr[]={{3,10},{2,8},{5,4}};    O/P: {2,8}, {3,10}, {5,4}
	int n=sizeof(arr)/sizeof(arr[0]);
	sort(arr,arr+n,MyComp);
	
	for(auto i: arr)
	    cout<<i.x<<" "<<i.y<<endl;
}

TIME COMPLEXITY OF SORT FUNCTION IS: USES INTRO SORT(HYBRID OF QUICK SORT, HEAP SORT AND INSERTION SORT):-> O(nlogn)

STABILITY IN SORTING ALGORITHM:


------------------------------------------------------------------------------------------------------------------------------------------------------------------
BUBBLE SORT ALGORITHM:  O(n2)

bubble sort compares the curretn element with the adjacent element and swaps it if it is out of order.
ex: 2,10,8,7

1st phase: maximum element reaches to its final position:
 2,8,7,10
2nd phase: the second last position will be filled witht the secomd largest element.
 2,7,8,10
 3rd phase: the third last position will be filled with the third largest elemetnt
 
 so we can just simply ignore already sorted last elements in every iteration to reduce the time complexity. so we can make the change in the loop as
 j<n-i-1.
 
 void bubbleSort(int arr[], int n){
    for(int i = 0;i < n; i++){
        for(int j = 0 ; j < n - i -1; j++){
            if( arr[j] > arr[j+1]){
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

now what if the array is already sorted and still it takes O(n2) time to check it again. to save the time we can optimize the code 

#include<bits/stdc++.h>
using namespace std;

void bubbleSort(int arr[], int n){
    
    bool swapped;
    for(int i = 0;i < n; i++){
        
        swapped = false;
        for(int j = 0 ; j < n - i -1; j++){
            if( arr[j] > arr[j+1]){
                swap(arr[j], arr[j+1]);
                swapped = true;
            }
        }
        
        if( swapped == false)
        break;
    }
}

int main() {
	int a[] = {2, 1, 3, 4};
	bubbleSort(a, 4);
	for(int i = 0; i < 4; i++){
	    cout<<a[i]<<" ";
	}
	return 0;
}



