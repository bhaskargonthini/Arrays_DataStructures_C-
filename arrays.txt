         --------------------------- ARRAYS DATA STRUCTURE  ----------------------------------------------
 
 VECTORS IN C++:
	ADVANATGES OF VECTORS IN C++:
		- dynamic size
		-rich library functions find,erase, insert etc..
		-easy to know the size
		-no need to pass size
		-can be returned from a functions
		-by default initialized with default values
		- we can copy a vector to other easily, v1=v2 copies all elements of v2 to v1

-------------------------------------------------------

OPERATION ON ARRAYS:
	Searching an element in an array and returns its index position.
	
	In unsorted array: O(n) time complexity.
	int search(int arr[], int n, int x)
		{
			for(int i = 0; i < n; i++)
			{
				if(arr[i] == x)
					return i;
			}

			return -1;
		}
		
	Inserting an element in an array only there is extra space in the array.
	int insert(int arr[], int n, int x, int cap, int pos)
		{
			if(n == cap)
				return n;

			int idx = pos - 1;

			for(int i = n - 1; i >= idx; i--)
			{
				arr[i + 1] = arr[i];
			}

			arr[idx] = x;

			return n + 1;
		} 
	Deletion of an element in an array
	int deleteEle(int arr[], int n, int x)
		{
			int i = 0;

			for(i = 0; i < n; i++)
			{
				if(arr[i] == x)
					break;
			}

			if(i == n)
				return n;

			for(int j = i; j < n - 1; j++)
			{
				arr[j] = arr[j + 1];
			}

			return n-1;
		} 
TIME COMPLEXITIES OF ALL OPERATIONS:
	Insert: O(n)
	Search: O(n) for unsorted
			O(logn) for sorted
	Delete: O(n)
	Getting ith element & updating ith element:  O(1)
--------------------------------------------------------------------

LARGEST ELEMENT IN AN ARRAY:
--------------------------------------------------------------------

CHECK IF AN ARRAY IS SORTED OR NOT:

#include <iostream>
#include <cmath>
using namespace std;

bool isSorted(int arr[], int n)
{
	for(int i = 1; i < n; i++)
	{
	    if(arr[i] < arr[i - 1])
	        return false;
	}

	return true;
} 

    
int main() {
	
      int arr[] = {5, 12, 30, 2, 35}, n = 5;
      
      printf("%s", isSorted(arr, n)? "true": "false");
    
}
---------------------------------------------------------------------
REVERSE OF AN ARRAY:

#include <iostream>
#include <cmath>
using namespace std;

 void reverse(int arr[], int n)
{
	int low = 0, high = n - 1;

	while(low < high)
	{
		int temp = arr[low];

		arr[low] = arr[high];

		arr[high] = temp;

		low++;
		high--;
	}
}

    
int main() {
	
      int arr[] = {10, 5, 7, 30}, n = 4;

      cout<<"Before Reverse"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }

       cout<<endl;

       reverse(arr, n);

       cout<<"After Reverse"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }
    
}
-----------------------------------------------------------------------
REMOVE DUPLICATES FROMTHE SORTED ARRAY:

int remDups(int arr[], int n)
	{
		int res = 1;

		for(int i = 1; i < n; i++)
		{
			if(arr[res - 1] != arr[i])
			{
				arr[res] = arr[i];
				res++;
			}
		}

		return res;
	}
--------------------------------------------------------------------------------