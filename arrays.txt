         --------------------------- ARRAYS DATA STRUCTURE  ----------------------------------------------
 
 VECTORS IN C++:
	ADVANATGES OF VECTORS IN C++:
		- dynamic size
		-rich library functions find,erase, insert etc..
		-easy to know the size
		-no need to pass size
		-can be returned from a functions
		-by default initialized with default values
		- we can copy a vector to other easily, v1=v2 copies all elements of v2 to v1

-------------------------------------------------------

OPERATION ON ARRAYS:
	Searching an element in an array and returns its index position.
	
	In unsorted array: O(n) time complexity.
	int search(int arr[], int n, int x)
		{
			for(int i = 0; i < n; i++)
			{
				if(arr[i] == x)
					return i;
			}

			return -1;
		}
		
	Inserting an element in an array only there is extra space in the array.
	int insert(int arr[], int n, int x, int cap, int pos)
		{
			if(n == cap)
				return n;

			int idx = pos - 1;

			for(int i = n - 1; i >= idx; i--)
			{
				arr[i + 1] = arr[i];
			}

			arr[idx] = x;

			return n + 1;
		} 
	Deletion of an element in an array
	int deleteEle(int arr[], int n, int x)
		{
			int i = 0;

			for(i = 0; i < n; i++)
			{
				if(arr[i] == x)
					break;
			}

			if(i == n)
				return n;

			for(int j = i; j < n - 1; j++)
			{
				arr[j] = arr[j + 1];
			}

			return n-1;
		} 
TIME COMPLEXITIES OF ALL OPERATIONS:
	Insert: O(n)
	Search: O(n) for unsorted
			O(logn) for sorted
	Delete: O(n)
	Getting ith element & updating ith element:  O(1)
--------------------------------------------------------------------

LARGEST ELEMENT IN AN ARRAY:
--------------------------------------------------------------------

CHECK IF AN ARRAY IS SORTED OR NOT:

#include <iostream>
#include <cmath>
using namespace std;

bool isSorted(int arr[], int n)
{
	for(int i = 1; i < n; i++)
	{
	    if(arr[i] < arr[i - 1])
	        return false;
	}

	return true;
} 

    
int main() {
	
      int arr[] = {5, 12, 30, 2, 35}, n = 5;
      
      printf("%s", isSorted(arr, n)? "true": "false");
    
}
---------------------------------------------------------------------
REVERSE OF AN ARRAY:

#include <iostream>
#include <cmath>
using namespace std;

 void reverse(int arr[], int n)
{
	int low = 0, high = n - 1;

	while(low < high)
	{
		int temp = arr[low];

		arr[low] = arr[high];

		arr[high] = temp;

		low++;
		high--;
	}
}

    
int main() {
	
      int arr[] = {10, 5, 7, 30}, n = 4;

      cout<<"Before Reverse"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }

       cout<<endl;

       reverse(arr, n);

       cout<<"After Reverse"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }
    
}
-----------------------------------------------------------------------
REMOVE DUPLICATES FROMTHE SORTED ARRAY:

int remDups(int arr[], int n)
	{
		int res = 1;

		for(int i = 1; i < n; i++)
		{
			if(arr[res - 1] != arr[i])
			{
				arr[res] = arr[i];
				res++;
			}
		}

		return res;
	}
--------------------------------------------------------------------------------
PROGRAM TO MOVE ALL ZEROES TO THE END OF THE ARRAY:

	Void moveZeroes(int arr[], int n)
	{
		int count = 0;
		for(int i=0;i<n;i++)
		{
			if(arr[i]!=0)
			{
				swap(arr[i],arr[count]);
				count++;
			}
		}
		
	}

-----------------------------------------------------------------------------------
LEFT ROTATE AN ARRAY BY ONE PLACE:

	void lRotateOne(int arr[], int n)
		{
			int temp = arr[0];

			for(int i = 1; i < n; i++)
			{
				arr[i - 1] = arr[i];
			}

			arr[n - 1] = temp;
		}
		
		or we can use swap function to swap every ith element with i+1 element till n-1 iteration in for loop.
		
	LEFT ROTATE AN ARRAY BY D PLACES:
	
#include <iostream>
#include <cmath>
using namespace std;


void reverse(int arr[], int low, int high)
{
	while(low < high)
	{
		swap(arr[high], arr[low]);

		low++;
		high--;
	}
}   

void leftRotate(int arr[], int d, int n)
{
	reverse(arr, 0, d - 1);

	reverse(arr, d, n - 1);

	reverse(arr, 0, n - 1);
}



int main() {
	
      int arr[] = {1, 2, 3, 4, 5}, n = 5, d = 2;

      cout<<"Before Rotation"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }

       cout<<endl;

       leftRotate(arr, d, n);

       cout<<"After Rotation"<<endl;

       for(int i = 0; i < n; i++)
       {
       		cout<<arr[i]<<" ";
       }
    
}
-----------------------------------------------------------------------------------------
LEADERS IN AN ARRAY
	I/P: arr[] = {7,10,4,3,6,5,2}
	o/p: 10,6,5,2
	leaders of an array means the current element is greater than all the elements
	to its right of the array. Even if there is an element which is same value as the current,
	it is not considered as leader.
An efficient approach is to traverse from the right side of the array,
the last element is always the leader of the array. so we keep checking from the right side with the 
current leader if it is greater we print the current leader. we repeat the process by changinh the leader everytime 
we find the new leader and checks them and print it if is greater.
	void leaders(int arr[], int n)
		{
			int curr_ldr = arr[n - 1];

			cout<<curr_ldr<<" ";

			for(int i = n - 2; i >= 0; i--)
			{
				if(curr_ldr < arr[i])
				{
					curr_ldr = arr[i];

					cout<<curr_ldr<<" ";
				}
			}
		}
-----------------------------------------------------------------------------------------------------------------------------
MAXIMUM DIFFERENCE PROBLEM WITH ORDER

Maximum Difference problem is to find the maximum of arr[j] - arr[i] where j>i.
	int maxDiff(int arr[], int n)
		{
			int res = arr[1] - arr[0], minVal = arr[0];

			for(int i = 1; i < n; i++)
			{
				
					res = max(res, arr[i] - minVal);
					
					minVal = min(minVal, arr[i]);
			}

			return res;
		}
		approach is to keep tracking of min value in every iterationa and checks with the current difference.
-----------------------------------------------------------------------------------------------
FREQUENCIES IN A SORTED ARRAY


		void printFreq(int arr[], int n)
			{
				int freq = 1, i = 1;

				while(i < n)
				{
					while(i < n && arr[i] == arr[i - 1])
					{
						freq++;
						i++;
					}

					cout<<arr[i - 1] << " " << freq << endl;

					i++;
					freq = 1;
				}
			}
-------------------------------------------------------------------------------------------------------------
TRAPPING RAIN WATER

int getWater(int arr[], int n)
	{
		int res = 0;

		for(int i = 1; i < n - 1; i++)
		{
			int res = 0;

			int lMax[n];
			int rMax[n];

			lMax[0] = arr[0];
			for(int i = 1; i < n; i++)
				lMax[i] = max(arr[i], lMax[i - 1]);


			rMax[n - 1] = arr[n - 1];
			for(int i = n - 2; i >= 0; i--)
				rMax[i] = max(arr[i], rMax[i + 1]);

			for(int i = 1; i < n - 1; i++)
				res = res + (min(lMax[i], rMax[i]) - arr[i]);
			
			return res;
		}
		return res;
	}
	
	
	
	
	
	
	
	
	
	
	
	
====================================================================================================================================================================================
	
============================================================================================================================================================================
----------------------------------------------------------------------------

IMPORTANT PROBLEM FOR REFERENCE:
 EQUILIBRIUM POINT:
 Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation: For second test case 
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2).

int equilibriumPoint(long long a[], int n) {
    
        // Your code here
        int sum = 0, lsum = 0;
        for(int i=0;i<n;i++) sum+= a[i];
        for(int i=0;i<n;i++){
            if(lsum == sum-a[i]) return i+1;
            lsum+= a[i];
            sum-= a[i];
        }
        return -1;
    }
-----------------------------------------------------------------------------------------
Frequencies of Limited Range Array Elements
Input:
N = 5
arr[] = {2, 3, 2, 3, 5}
P = 5
Output:
0 2 2 0 1
Explanation: 
Counting frequencies of each array element
We have:
1 occurring 0 times.
2 occurring 2 times.
3 occurring 2 times.
4 occurring 0 times.
5 occurring 1 time.

void frequencyCount(vector<int>& arr,int N, int P)
    { 
        // code here
        vector<int> v(N+1,0);
        for(int i=0;i<N;i++){
            if(arr[i]<=N && arr[i]>0){
                v[arr[i]]++;
            }
        }
        for(int i=1;i<N+1;i++){
            arr[i-1] = v[i];
        }
        
    }
----------------------------------------------------------------------------------------------------
You are given an array arr[] of N integers including 0. The task is to find the smallest positive number missing from the array.

Example 1:

Input:
N = 5
arr[] = {1,2,3,4,5}
Output: 6
Explanation: Smallest positive missing 
number is 6.
Example 2:

Input:
N = 5
arr[] = {0,-10,1,3,-20}
Output: 2
Explanation: Smallest positive missing 
number is 2.

There are two solutions: a simplem solution with more time:

kaganesh12
1 week ago

easiest way to do this is as follows:

 

int missingNumber(int arr[], int n) 
   { 
      
       sort(arr,arr+n);
       int count=1;
       for (int i=0;i<n;i++)
       {
           if (arr[i]==count)
           count++;
       }
       return count;
   } 

Less time taking and lengthy process:

int segregateArr (int arr[], int n) 
    { 
    	int j = 0; 
    	for(int i = 0; i < n; i++) 
    	{ 
    	    if(arr[i] <= 0) 
    	    { 
    	        //changing the position of negative numbers and 0.
    	        swap(arr[i], arr[j]); 
    	        //incrementing count of non-positive integers.
    	        j++; 
    		} 
    	}
    	return j; 
    } 
    
    //Finding the smallest positive missing number in an array 
    //that contains only positive integers.
    int findMissingPositive(int arr[], int n)
    {
        
        //marking arr[i] as visited by making arr[arr[i]-1] negative. 
        //note that 1 is subtracted because indexing starts from 0 and 
        //positive numbers start from 1.
        for(int i=0; i<n; i++) 
        {
    	    if(abs(arr[i]) - 1 < n && arr[ abs(arr[i]) - 1] > 0) 
    	    arr[ abs(arr[i]) - 1] = -arr[ abs(arr[i]) - 1]; 
        } 
        
        for(int i=0; i<n; i++)
        {
            if (arr[i] > 0)
            {
                //returning the first index where value is positive. 
                // 1 is added because indexing starts from 0. 
    	        return i+1; 
            }
        }
        return n+1; 
    } 
    
    //Function to find the smallest positive number missing from the array.
    int missingNumber(int arr[], int n) 
    { 
        //first separating positive and negative numbers. 
        int shift = segregateArr(arr, n); 
        
        //shifting the array to access only positive part.
        //calling function to find result and returning it.
        return findMissingPositive(arr+shift, n-shift); 
    } 
----------------------------------------------------------------------------------------------------------------------------------
