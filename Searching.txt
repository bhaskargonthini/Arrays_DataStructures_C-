																		
																		SEARCHING
																		
Binary search: Iterative approach.

#include <iostream>
using namespace std;


int bSearch(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == x)
			return mid;

		else if(arr[mid] > x)
			high = mid - 1;

		else
			low = mid + 1;
	}

	return -1;
}

int main() {
    
    int arr[] = {10, 20, 30, 40, 50, 60}, n = 6;

	int x = 25;
	
	cout<<bSearch(arr, n, x);
	return 0;
}
Steps: Arr = [10,20,30,40,50]
	Compute mid = (low+high)/2.
	case1: 
		arr[mid] == x, x = 30 => arr[mid] = 30
		return mid;
	case2:
		arr[mid]>x, x = 10 the value will be in the first half
	case3:
		arr[mid]<x, x = 50, the value will be in the second half.
	In this way we can optimize the solution.

Recursive Binary search: Recursive approach.

#include <iostream>
using namespace std;


int bSearch(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(arr[mid] == x)
		return mid;

	else if(arr[mid] > x)
		return bSearch(arr, low, mid - 1, x);

	else
		return bSearch(arr, mid + 1, high, x);
}

int main() {
    
     int arr[] = {10, 20, 30, 40, 50, 60, 70}, n = 7;

	int x = 20;
	
	cout<<bSearch(arr, 0, n - 1, x);
	return 0;
}
Time complexity of both iterative appproach and recursive approcah.: O(logn)
Auxilary space: Iterative takes less space O(1)
				recursive takes O(logn)

--------------------------------------------------------------------------------------------------------------------------------------------------
Index of first Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of first occurrence of x.

Recursive binary search approach:

int firstOcc(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return firstOcc(arr, mid + 1, high, x);

	else if(x < arr[mid])
		return firstOcc(arr, low, mid - 1, x);

	else
	{
		if(mid == 0 || arr[mid - 1] != arr[mid])
			return mid;

		else
			return firstOcc(arr, low, mid - 1, x);
	}
}

Iterative Binaray search appproach:

int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}

Index of last Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of last occurrence of x.

Recursive binary search approach:
int lastOcc(int arr[], int low, int high, int x, int n)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return lastOcc(arr, mid + 1, high, x, n);

	else if(x < arr[mid])
		return lastOcc(arr, low, mid - 1, x, n);

	else
	{
		if(mid == n - 1 || arr[mid + 1] != arr[mid])
			return mid;

		else
			return lastOcc(arr, mid + 1, high, x, n);
	}
}

Iterative Binaray search appproach:

int lastOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == n - 1 || arr[mid + 1] != arr[mid])
				return mid;

			else
				low = mid + 1;
		}

	}

	return -1;
}

----------------------------------------------------------------------------------------------------
COUNT OCCURRENCES IN SORTED
Given a sorted array and an element x, we need to count occurrences of x in the array.

calling first occurance and last occurance in one function gives the indexes of the first and last occurances,
then we can count number of occurances easily.

Time comp: O(logn)
int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


