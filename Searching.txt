																		
																		SEARCHING
																		
Binary search: Iterative approach.

#include <iostream>
using namespace std;


int bSearch(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == x)
			return mid;

		else if(arr[mid] > x)
			high = mid - 1;

		else
			low = mid + 1;
	}
	return -1;
}
int main() {
    
    int arr[] = {10, 20, 30, 40, 50, 60}, n = 6;

	int x = 25;
	cout<<bSearch(arr, n, x);
	return 0;
}
Steps: Arr = [10,20,30,40,50]
	Compute mid = (low+high)/2.
	case1: 
		arr[mid] == x, x = 30 => arr[mid] = 30
		return mid;
	case2:
		arr[mid]>x, x = 10 the value will be in the first half
	case3:
		arr[mid]<x, x = 50, the value will be in the second half.
		In this way we can optimize the solution.

Recursive Binary search: Recursive approach

#include <iostream>
using namespace std;


int bSearch(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(arr[mid] == x)
		return mid;

	else if(arr[mid] > x)
		return bSearch(arr, low, mid - 1, x);

	else
		return bSearch(arr, mid + 1, high, x);
}

int main() {
    
     int arr[] = {10, 20, 30, 40, 50, 60, 70}, n = 7;

	int x = 20;
	
	cout<<bSearch(arr, 0, n - 1, x);
	return 0;
}
Time complexity of both iterative appproach and recursive approcah.: O(logn)
Auxilary space: Iterative takes less space O(1)
				recursive takes O(logn)

--------------------------------------------------------------------------------------------------------------------------------------------------
Index of first Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of first occurrence of x.

Recursive binary search approach:

int firstOcc(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return firstOcc(arr, mid + 1, high, x);

	else if(x < arr[mid])
		return firstOcc(arr, low, mid - 1, x);

	else
	{
		if(mid == 0 || arr[mid - 1] != arr[mid])
			return mid;

		else
			return firstOcc(arr, low, mid - 1, x);
	}
}

Iterative Binaray search appproach:

int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}

Index of last Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of last occurrence of x.

Recursive binary search approach:
int lastOcc(int arr[], int low, int high, int x, int n)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return lastOcc(arr, mid + 1, high, x, n);

	else if(x < arr[mid])
		return lastOcc(arr, low, mid - 1, x, n);

	else
	{
		if(mid == n - 1 || arr[mid + 1] != arr[mid])
			return mid;

		else
			return lastOcc(arr, mid + 1, high, x, n);
	}
}

Iterative Binaray search appproach:

int lastOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == n - 1 || arr[mid + 1] != arr[mid])
				return mid;

			else
				low = mid + 1;
		}

	}

	return -1;
}

----------------------------------------------------------------------------------------------------
COUNT OCCURRENCES IN SORTED
Given a sorted array and an element x, we need to count occurrences of x in the array.

calling first occurance and last occurance in one function gives the indexes of the first and last occurances,
then we can count number of occurances easily.

Time comp: O(logn)
#include <iostream>
using namespace std;

int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}

int lastOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == n - 1 || arr[mid + 1] != arr[mid])
				return mid;

			else
				low = mid + 1;
		}

	}

	return -1;
}

int countOcc(int arr[], int n, int x)
{
	int first = firstOcc(arr, n, x);

	if(first == -1)
		return 0;
	else 
		return lastOcc(arr, n, x) - first + 1;
}

int main() {
    
   int arr[] = {10, 20, 20, 20, 40, 40}, n = 6;

   int x = 20;

   cout << countOcc(arr, n, x);

	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQUARE ROOT: Using binary search.

Given an integer, we need to find floor of its square root. 

int sqRootFloor(int x)
{
	int low = 1, high = x, ans = -1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		int mSq = mid * mid;

		if(mSq == x)
			return mid;
		else if(mSq > x)
			high = mid - 1;
		else
		{
			low = mid + 1;
			ans = mid;
		}
	}

	return ans;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SEARCH IN INFINITE SIZED ARRAY

Given an infinite sized array, we need to write an efficient solution to search an element. In this video, we have discussed two solutions.

#include <iostream>
using namespace std;

int bSearch(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(arr[mid] == x)
		return mid;

	else if(arr[mid] > x)
		return bSearch(arr, low, mid - 1, x);

	else
		return bSearch(arr, mid + 1, high, x);
}


int search(int arr[], int x)
{
    if(arr[0] == x) return 0;

	int i = 1;

	while(arr[i] < x)
		i = i * 2;

	if(arr[i] == x) return i;


	return bSearch(arr, i / 2 + 1, i - 1, x);
}

int main() {
    

   int arr[] = {1, 2, 3, 5, 5};

	int x = 4;

	cout << search(arr,x);

	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SEARCH IN SORTED ROTATED ARRAY.

This video talks about O(Log n) approach to search an element in a sorted and rotated array.

int search(int arr[], int n, int x)
{
   	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == x)
			return mid;
		if(arr[low] < arr[mid])
		{
			if(x >= arr[low] && x < arr[mid])
				high = mid - 1;
			else 
				low = mid + 1;
		}
		else
		{
			if(x > arr[mid] && x <= arr[high])
				low = mid + 1;
			else
				high = mid - 1;
		}
	}
	

	return -1;
}

Time complexity: O(logn)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Majority Element:

Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.

Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3

Using Mooreâ€™s Voting Algorithm:

Approach: This is a two-step process. 
--The first step gives the element that maybe the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
--Check if the element obtained from the above step is majority element. This step is necessary as there might be no majority element.

Algorithm: 
1.Loop through each element and maintains a count of majority element, and a majority index, maj_index
2.If the next element is same then increment the count if the next element is not same then decrement the count.
3.if the count reaches 0 then changes the maj_index to the current element and set the count again to 1.
4.Now again traverse through the array and find the count of majority element found.
5.If the count is greater than half the size of the array, print the element
6.Else print that there is no majority element.


int majorityElement(int a[], int size)
    {
        
        // your code here
        if(size == 1) return a[0];
        int count = 1, maj_ind = 0;
        for(int i=1;i<size;i++){
            
            if(a[i] == a[maj_ind])
            count++;
            else count--;
            if(count == 0){
                maj_ind = i;
                count = 1;
            }
            
        }
        //cout<<a[maj_ind]<<endl;
        int res = 0;
        for(int i=0;i<size;i++){
            if(a[i] == a[maj_ind]) ++res;
            //cout<<i<<" ";
            //cout<<res<<endl;
        }
        //cout<<res<<endl;
        if(res>size/2) return a[maj_ind];
        else return -1;
        
        
    }
    
    There are other approaches like Binary search tree and hashing approcah. Refer this link: https://practice.geeksforgeeks.org/batch-problems/majority-element-1587115620/0/?track=DSASP-Searching&batchId=145#
    
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------
    TWO POINTER APPROACH:
     For unsorted arrays, finding the pair which has sum equals to given sum, we can go for hashing technique which takes O(n) extra space but if the array is already sorted we can use two pointer approach.
     
     For unsorted array:
     Find pair in unsorted array which gives sum X(using hashing)
     // C++ program to check if given array 
// has 2 elements whose sum is equal 
// to the given value 
#include <bits/stdc++.h> 

using namespace std; 

void printPairs(int arr[], int arr_size, int sum) 
{ 
	unordered_set<int> s; 
	for (int i = 0; i < arr_size; i++) { 
		int temp = sum - arr[i]; 

		if (s.find(temp) != s.end()) 
			cout << "Pair with given sum " << sum << " is (" << arr[i] << ", " << temp << ")" << endl; 

		s.insert(arr[i]); 
	} 
} 

/* Driver program to test above function */
int main() 
{ 
	int A[] = { 1, 4, 45, 6, 10, 8 }; 
	int n = 16; 
	int arr_size = sizeof(A) / sizeof(A[0]); 

	// Function calling 
	printPairs(A, arr_size, n); 

	return 0; 
} 


For sorted array:Find pair in sorted array which gives sum X(two pointer approach)

#include <bits/stdc++.h>
using namespace std;

bool isPresent(int arr[], int n, int sum)
{
    int l = 0, h = n-1;
    int mid;
    while(l <= h)
    {
        if(arr[l] + arr[h] == sum)
          return true;
        else if(arr[l] + arr[h] > sum)
             h--;
        else l++;
    }
    return false;
}

int main()
{
    int arr[] = {2, 3, 7, 8, 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    int sum = 14;
    
    cout << isPresent(arr, n, sum);
}
 
 Another variation of the problem:
 Find triplet in an array which gives sum X :
 bool find3Numbers(int A[], int arr_size, int sum) 
{ 
	int l, r; 

	/* Sort the elements */
	sort(A, A + arr_size); 

	/* Now fix the first element one by one and find the 
	other two elements */
	for (int i = 0; i < arr_size - 2; i++) { 

		// To find the other two elements, start two index 
		// variables from two corners of the array and move 
		// them toward each other 
		l = i + 1; // index of the first element in the 
		// remaining elements 

		r = arr_size - 1; // index of the last element 
		while (l < r) { 
			if (A[i] + A[l] + A[r] == sum) { 
				printf("Triplet is %d, %d, %d", A[i], 
					A[l], A[r]); 
				return true; 
			} 
			else if (A[i] + A[l] + A[r] < sum) 
				l++; 
			else // A[i] + A[l] + A[r] > sum 
				r--; 
		} 
	} 

	// If we reach here, then no triplet was found 
	return false; 
} 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Repeating Elements Part (1): we create a boolean array where we mark the indexes of respective elements of original arra with true and check if the
element is true, if it is true then break the loop and returns the index.
int repeat(int arr[], int n)
{
	bool visit[n];
	
	memset(visit, false, sizeof(visit));
	
	for(int i = 0; i < n; i++)
	{
		if(visit[arr[i]])
			return arr[i];
		visit[arr[i]] = true;
	}

	return -1;
}

Repeating Elements Part (2):
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;



int repeat(int arr[], int n)
{
	int slow = arr[0], fast = arr[0];

	do{
		slow = arr[slow];
		fast = arr[arr[fast]];
	
	}while(slow != fast);
	
	slow = arr[0];

	while(slow != fast)
	{
		slow = arr[slow];
		fast = arr[fast];
	}
	return slow;
}


int main() {
    

 int arr[] = {1, 3, 2, 4, 6, 5, 7, 3}, n= 8;

 cout << repeat(arr, n);

	return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Allocate Minimum Pages (Naive Method): popular interview question.


====================================================================================================================================================================IMPORTANT PROBLEMS ON SEARCHING

Count only repeated:
We can find number of times a number is repeating by simply finding the count

count = n-(arr[n-1]-arr[0]); if this count is 1 then there is no repeating element in the array. If it is greater than 1 then there is one repeating element and the number of times it is repeating is the count.

pair<int, int> findRepeating(int *arr, int n){
        //code here
        int rep, count = 0,low = 0, high = n-1;
        count = n-(arr[n-1]-arr[0]);
        if(count == 1) return {-1,-1};
        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid] == arr[mid-1] || arr[mid] == arr[mid+1])
            return {arr[mid], count};
            //else if(mid-(arr[mid]-arr[low]) == 0) low = mid+1;
            else if(arr[mid]>=mid+arr[0]) low = mid+1;      // we can find whether the left half contains the repeated element or not. since the elemenets are 
	    						    //consecutive so if arr[mid]>=mid+arr[0] then there is no repeating element in the first half.
            else high = mid-1;
        }


    



