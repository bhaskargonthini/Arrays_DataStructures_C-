																		
																		SEARCHING
																		
Binary search: Iterative approach.


#include <iostream>
using namespace std;


int bSearch(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == x)
			return mid;

		else if(arr[mid] > x)
			high = mid - 1;

		else
			low = mid + 1;
	}
	return -1;
}

int main() {
    
    int arr[] = {10, 20, 30, 40, 50, 60}, n = 6;

	int x = 25;
	
	cout<<bSearch(arr, n, x);
	return 0;
}
Steps: Arr = [10,20,30,40,50]
	Compute mid = (low+high)/2.
	case1: 
		arr[mid] == x, x = 30 => arr[mid] = 30
		return mid;
	case2:
		arr[mid]>x, x = 10 the value will be in the first half
	case3:
		arr[mid]<x, x = 50, the value will be in the second half.
	In this way we can optimize the solution.

Recursive Binary search: Recursive approach.

#include <iostream>
using namespace std;


int bSearch(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(arr[mid] == x)
		return mid;

	else if(arr[mid] > x)
		return bSearch(arr, low, mid - 1, x);

	else
		return bSearch(arr, mid + 1, high, x);
}

int main() {
    
     int arr[] = {10, 20, 30, 40, 50, 60, 70}, n = 7;

	int x = 20;
	
	cout<<bSearch(arr, 0, n - 1, x);
	return 0;
}
Time complexity of both iterative appproach and recursive approcah.: O(logn)
Auxilary space: Iterative takes less space O(1)
				recursive takes O(logn)

--------------------------------------------------------------------------------------------------------------------------------------------------
Index of first Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of first occurrence of x.

Recursive binary search approach:

int firstOcc(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return firstOcc(arr, mid + 1, high, x);

	else if(x < arr[mid])
		return firstOcc(arr, low, mid - 1, x);

	else
	{
		if(mid == 0 || arr[mid - 1] != arr[mid])
			return mid;

		else
			return firstOcc(arr, low, mid - 1, x);
	}
}

Iterative Binaray search appproach:

int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}

Index of last Occurrence in Sorted
Given a sorted array with repetition and an element x, we need to find index of last occurrence of x.

Recursive binary search approach:
int lastOcc(int arr[], int low, int high, int x, int n)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(x > arr[mid])
		return lastOcc(arr, mid + 1, high, x, n);

	else if(x < arr[mid])
		return lastOcc(arr, low, mid - 1, x, n);

	else
	{
		if(mid == n - 1 || arr[mid + 1] != arr[mid])
			return mid;

		else
			return lastOcc(arr, mid + 1, high, x, n);
	}
}

Iterative Binaray search appproach:

int lastOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == n - 1 || arr[mid + 1] != arr[mid])
				return mid;

			else
				low = mid + 1;
		}

	}

	return -1;
}

----------------------------------------------------------------------------------------------------
COUNT OCCURRENCES IN SORTED
Given a sorted array and an element x, we need to count occurrences of x in the array.

calling first occurance and last occurance in one function gives the indexes of the first and last occurances,
then we can count number of occurances easily.

Time comp: O(logn)
#include <iostream>
using namespace std;

int firstOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == 0 || arr[mid - 1] != arr[mid])
				return mid;

			else
				high = mid - 1;
		}

	}

	return -1;
}

int lastOcc(int arr[], int n, int x)
{
	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(x > arr[mid])
			low = mid + 1;

		else if(x < arr[mid])
			high = mid - 1;

		else
		{
			if(mid == n - 1 || arr[mid + 1] != arr[mid])
				return mid;

			else
				low = mid + 1;
		}

	}

	return -1;
}

int countOcc(int arr[], int n, int x)
{
	int first = firstOcc(arr, n, x);

	if(first == -1)
		return 0;
	else 
		return lastOcc(arr, n, x) - first + 1;
}

int main() {
    
   int arr[] = {10, 20, 20, 20, 40, 40}, n = 6;

   int x = 20;

   cout << countOcc(arr, n, x);

	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQUARE ROOT: Using binary search.

Given an integer, we need to find floor of its square root. 

int sqRootFloor(int x)
{
	int low = 1, high = x, ans = -1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		int mSq = mid * mid;

		if(mSq == x)
			return mid;
		else if(mSq > x)
			high = mid - 1;
		else
		{
			low = mid + 1;
			ans = mid;
		}
	}

	return ans;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SEARCH IN INFINITE SIZED ARRAY

Given an infinite sized array, we need to write an efficient solution to search an element. In this video, we have discussed two solutions.

#include <iostream>
using namespace std;

int bSearch(int arr[], int low, int high, int x)
{
	if(low > high)
		return -1;

	int mid = (low + high) / 2;

	if(arr[mid] == x)
		return mid;

	else if(arr[mid] > x)
		return bSearch(arr, low, mid - 1, x);

	else
		return bSearch(arr, mid + 1, high, x);
}


int search(int arr[], int x)
{
    if(arr[0] == x) return 0;

	int i = 1;

	while(arr[i] < x)
		i = i * 2;

	if(arr[i] == x) return i;


	return bSearch(arr, i / 2 + 1, i - 1, x);
}

int main() {
    

   int arr[] = {1, 2, 3, 5, 5};

	int x = 4;

	cout << search(arr,x);

	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SEARCH IN SORTED ROTATED ARRAY.

This video talks about O(Log n) approach to search an element in a sorted and rotated array.

int search(int arr[], int n, int x)
{
   	int low = 0, high = n - 1;

	while(low <= high)
	{
		int mid = (low + high) / 2;

		if(arr[mid] == x)
			return mid;
		if(arr[low] < arr[mid])
		{
			if(x >= arr[low] && x < arr[mid])
				high = mid - 1;
			else 
				low = mid + 1;
		}
		else
		{
			if(x > arr[mid] && x <= arr[high])
				low = mid + 1;
			else
				high = mid - 1;
		}
	}
	

	return -1;
}

Time complexity: O(logn)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Majority Element:

Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.

Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3

Using Mooreâ€™s Voting Algorithm:

Approach: This is a two-step process. 
--The first step gives the element that maybe the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
--Check if the element obtained from the above step is majority element. This step is necessary as there might be no majority element.

Algorithm: 
1.Loop through each element and maintains a count of majority element, and a majority index, maj_index
2.If the next element is same then increment the count if the next element is not same then decrement the count.
3.if the count reaches 0 then changes the maj_index to the current element and set the count again to 1.
4.Now again traverse through the array and find the count of majority element found.
5.If the count is greater than half the size of the array, print the element
6.Else print that there is no majority element.


int majorityElement(int a[], int size)
    {
        
        // your code here
        if(size == 1) return a[0];
        int count = 1, maj_ind = 0;
        for(int i=1;i<size;i++){
            
            if(a[i] == a[maj_ind])
            count++;
            else count--;
            if(count == 0){
                maj_ind = i;
                count = 1;
            }
            
        }
        //cout<<a[maj_ind]<<endl;
        int res = 0;
        for(int i=0;i<size;i++){
            if(a[i] == a[maj_ind]) ++res;
            //cout<<i<<" ";
            //cout<<res<<endl;
        }
        //cout<<res<<endl;
        if(res>size/2) return a[maj_ind];
        else return -1;
        
        
    }
    
    There are other approaches like Binary search tree and hashing approcah. Refer this link: https://practice.geeksforgeeks.org/batch-problems/majority-element-1587115620/0/?track=DSASP-Searching&batchId=145#
